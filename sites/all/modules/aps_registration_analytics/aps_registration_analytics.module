<?php
/**
 * @file
 * Front-end interfaces that use the Google Analytics API module.
 */

/**
 * Implements hook_block_info().
 */
function aps_registration_analytics_block_info() {
  $blocks['common_browser']['info'] = t('Browser');
  $blocks['geo_location']['info'] = t('Geographic Locations');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function aps_registration_analytics_block_view($delta = '') {
  switch ($delta) {
    case 'common_browser':
      $block['subject'] = t('Browsers Used');
      $block['content'] = aps_common_browser_build();
      return $block;
    case 'geo_location':
      $block['subject'] = t('Geographic Locations');
      $block['content'] = aps_geo_location_build();
      return $block;
  }
}

/**
 * Generates a block with the most common Browsers.
 */
function aps_common_browser_build() {
  if (!variable_get('google_analytics_reports_oauth_token', FALSE)) {
    return '<p>' . t('You must <a href="!url">authorize</a> Drupal to use your Analytics account before you can view reports.', array('!url' => url('admin/config/system/google-analytics-reports'))) . '</p>';
  }

  $params = array(
    'metrics' => array('ga:users'),
    'dimensions' => array('ga:browser'),
    'sort_metric' => array(),
    'filters' => '',
    'start_date' => date('Y-m-d', strtotime('1 Jan 2015')),
    'end_date' => date('Y-m-d', strtotime('today')),
  );

  $feed = google_analytics_api_report_data($params);
  if ($feed->error) {
    return '<p>' . _google_analytics_reports_error_message() . '</p>';
  }
  foreach ($feed->results->rows as $row) {
    $rows[] = $row['users'];
    $header[] = $row['browser'];
  }

  $settings['chart']['browsers'] = array(  
    'header' => $header,
    'rows' => array($rows),
    'columns' => array("Usage"),
    'chartType' => 'PieChart',
    'containerId' =>  'aps-common-browser',
    'options' => array( // Optionals.
      'curveType' => "function",
      'is3D' => TRUE,
      'forceIFrame' => FALSE,
      'width' => 400,
      'height' => 220,
      'backgroundColor' => 'transparent'
    ),
  );

  draw_chart($settings);

  return '<div id="aps-common-browser"></div>';
}

/**
 * Generates a block of the Geographic locations.
 */
function aps_geo_location_build() {
  if (!variable_get('google_analytics_reports_oauth_token', FALSE)) {
    return '<p>' . t('You must <a href="!url">authorize</a> Drupal to use your Analytics account before you can view reports.', array('!url' => url('admin/config/system/google-analytics-reports'))) . '</p>';
  }

  $params = array(
    'metrics' => array('ga:users'),
    'dimensions' => array('ga:country'),
    'sort_metric' => array(),
    'filters' => '',
    'start_date' => date('Y-m-d', strtotime('1 Jan 2015')),
    'end_date' => date('Y-m-d', strtotime('today')),
  );

  $feed = google_analytics_api_report_data($params);
  if ($feed->error) {
    return '<p>' . _google_analytics_reports_error_message() . '</p>';
  }
  foreach ($feed->results->rows as $row) {
    $rows[] = $row['users'];
    $header[] = $row['country'];
  }

  $settings['chart']['location'] = array(  
      'header' => $header,
      'rows' => array($rows),
      'columns' => array("Viewers"),
      'chartType' => 'GeoChart',
      'containerId' =>  'aps-geo-location',
      'options' => array( 
        'forceIFrame' => FALSE, 
        'width' => 400,
        'height' => 280,
      )   
    );

  draw_chart($settings);
  
  return '<div id="aps-geo-location"></div>';
}

/**
 * Preprocess function for views-view.tpl.php.
 */
function aps_registration_analytics_preprocess_views_view(&$variables) {
  if ($variables['view']->name === 'container_view') {
    $client_graph = active_watcher_build_graph();
  }
}

/**
 * Draws graph in view block
 */
function active_watcher_build_graph(){


  $tracking['chart']['viewers'] = array(
    'header' => $header,
    'rows' => array($rows),
    'chartType' => 'SteppedAreaChart',
    'containerId' => 'content',
    'options' => array(
      'forceIFrame' => FALSE,
      'width' => 660,
      'height' => 300,
      'colors' => $colour_array,
      'legend' => 'none',
      ),
    );

  return draw_chart($tracking); 
}

/*
 * Construct a filter string that only allows the hours the webcast is active.
 */
function _google_analytics_reports_live_filter($start = '', $end = '') {
  if (!empty($start) && !empty($end)) {
    foreach (range(date('H', strtotime($start)), date('H', strtotime($end))) as $hour) {
      $hours[] = 'ga:hour==' . str_pad($hour, 2, 0, STR_PAD_LEFT);
    }
    return implode(',',$hours);
  } 
}